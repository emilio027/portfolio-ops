name: repo-optimizer

on:
  workflow_dispatch:
    inputs:
      repos:
        description: "Comma-separated owner/repo list"
        required: true
        type: string

jobs:
  optimize:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run optimizer script
        env:
          TOKEN: ${{ secrets.PAT }} # Add your PAT secret in repo settings
          TARGET_REPOS: ${{ inputs.repos }}
        run: |
          python - <<'PY'
import os, base64, requests
from urllib.parse import quote

API = "https://api.github.com"
TOKEN = os.getenv("TOKEN")
REPOS = [r.strip() for r in os.getenv("TARGET_REPOS", "").split(",") if r.strip()]
BRANCH = "repo-optimizer-bot"
MSG = "chore: update repo structure"
README = "# Project Title\n\nThis is a standardized README."

def H(): return {"Authorization": f"Bearer {TOKEN}", "Accept":"application/vnd.github+json"}

def get_default(repo):
    r = requests.get(f"{API}/repos/{repo}", headers=H()); r.raise_for_status()
    return r.json()["default_branch"]

def ref_exists(repo, branch):
    r = requests.get(f"{API}/repos/{repo}/git/ref/heads/{branch}", headers=H())
    return r.status_code == 200

def mkbranch(repo, base, new):
    sha = requests.get(f"{API}/repos/{repo}/git/ref/heads/{base}", headers=H()).json()["object"]["sha"]
    requests.post(f"{API}/repos/{repo}/git/refs", headers=H(), json={"ref": f"refs/heads/{new}", "sha": sha}).raise_for_status()

def put_file(repo, path, content_text, branch):
    content_b64 = base64.b64encode(content_text.encode()).decode()
    requests.put(f"{API}/repos/{repo}/contents/{quote(path)}", headers=H(), json={
        "message": MSG, "content": content_b64, "branch": branch
    }).raise_for_status()

if not TOKEN: raise SystemExit("Missing PAT secret")
for repo in REPOS:
    base = get_default(repo)
    if not ref_exists(repo, BRANCH):
        mkbranch(repo, base, BRANCH)
    put_file(repo, "README.md", README, BRANCH)
    print(f"Updated {repo}")

PY
